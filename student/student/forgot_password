//Register repo

@Repository
public interface RegisterRepo extends JpaRepository<Register, Integer>{
	
	Register findByUsername(String username); 
	Register findByEmail(String email);
	Register findByResetToken(String resetToken);
}

//authService

@Service
public class AuthService {
	
	@Autowired
	private RegisterRepo registerRepo;

	public String forgotPassword(String email) {
		System.out.println("searching for email" + email);
		Register user = registerRepo.findByEmail(email);
		if(user == null) {
			System.out.println("User not found");
			return "User Not Found";
		}
		
		//generate UUID as reset token
		String token = UUID.randomUUID().toString();
		user.setResetToken(token);
		user.setTokenExpiry(LocalDateTime.now().plusMinutes(30));	//token expires in 30 min
		registerRepo.save(user);
		
		//return token directly instead of email
		return "Your password reset token" + token;
	}
	
	public String resetPassword(String token, String newPassword) {
		Register user = registerRepo.findByResetToken(token);
		if(user == null) {
			return "Invalid token";
		}
		user.setPassword(newPassword);	//store password directly (no hashing)
		user.setResetToken(null);	//clear token after reset
		registerRepo.save(user);
		return "Password reset successfully!";
		
	}
}

//controller

 @PostMapping("/forgot-password")
    public String forgetPassword(@RequestBody String email) {
    	return authService.forgotPassword(email);
    }
    
    @PostMapping("/reset-password")
    public String resetPassword(@RequestBody String token, String newPassword) {
    	return authService.resetPassword(token, newPassword);
    }
