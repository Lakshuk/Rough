//Register repo

@Repository
public interface RegisterRepo extends JpaRepository<Register, Integer>{
	
	Register findByUsername(String username); 
	Register findByEmail(String email);
	Register findByResetToken(String resetToken);
}

//authService

@Service
public class AuthService {
	
	@Autowired
	private RegisterRepo registerRepo;

	public String forgotPassword(String email) {
		System.out.println("searching for email" + email);
		Register user = registerRepo.findByEmail(email);
		if(user == null) {
			System.out.println("User not found");
			return "User Not Found";
		}
		
		//generate UUID as reset token
		String token = UUID.randomUUID().toString();
		user.setResetToken(token);
		user.setTokenExpiry(LocalDateTime.now().plusMinutes(30));	//token expires in 30 min
		registerRepo.save(user);
		
		//return token directly instead of email
		return "Your password reset token" + token;
	}
	
	public String resetPassword(String token, String newPassword) {
		Register user = registerRepo.findByResetToken(token);
		if(user == null) {
			return "Invalid token";
		}
		user.setPassword(newPassword);	//store password directly (no hashing)
		user.setResetToken(null);	//clear token after reset
		registerRepo.save(user);
		return "Password reset successfully!";
		
	}
}

//controller

 @PostMapping("/forgot-password")
    public String forgetPassword(@RequestBody String email) {
    	return authService.forgotPassword(email);
    }
    
    @PostMapping("/reset-password")
    public String resetPassword(@RequestBody String token, String newPassword) {
    	return authService.resetPassword(token, newPassword);
    }


//react

//forgetPassword

import React, { useState } from "react";
import { useAuth } from "../context/AuthContext";

const ForgotPassword = () => {
  const { forgotPassword } = useAuth();
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    const result = await forgotPassword(email);
    setMessage(result.message);
  };

  return (
    <div>
      <h2>Forgot Password</h2>
      <form onSubmit={handleSubmit}>
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <button type="submit">Request Reset Token</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default ForgotPassword;


//reset password

import React, { useState } from "react";
import { useAuth } from "../context/AuthContext";
import { useSearchParams } from "react-router-dom";

const ResetPassword = () => {
  const { resetPassword } = useAuth();
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token"); // Get token from URL
  const [newPassword, setNewPassword] = useState("");
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    const result = await resetPassword(token, newPassword);
    setMessage(result.message);
  };

  return (
    <div>
      <h2>Reset Password</h2>
      <form onSubmit={handleSubmit}>
        <label>New Password:</label>
        <input
          type="password"
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
          required
        />
        <button type="submit">Reset Password</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default ResetPassword;


//authProvider

//Forget password
        const forgotPassword = async(email) => {
          try{
            console.log("sending forget password for:", email);
            const response = await axios.post("http://localhost:8080/student/forgot-password",
                { email });
            console.log("Response:", response.data);
            return { success : true, message : response.data};
          }
          catch(error){
            console.log("Error response:", error.response?.data);
            return { success : false, message : "User not found"};
          }
        };

        //Reset password
        const resetPassword = async(token, newPassword) => {
          try{
            const response = await axios.post("http://localhost:8080/student/reset-password",
                { token, newPassword });
            return { success : true, message : response.data};
          }
          catch(error){
            return { success : false, message : error.response?.data ||"Invalid or expired token!"};
          }
        };

