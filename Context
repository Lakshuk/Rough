//service 

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    // Register user
    public String registerUser(User user) {
        if (userRepository.findByUsername(user.getUsername()) != null) {
            return "Username already exists!";
        }
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepository.save(user);
        return "User registered successfully!";
    }

    // Login user
    public String loginUser(String username, String password) {
        User user = userRepository.findByUsername(username);
        if (user == null || !passwordEncoder.matches(password, user.getPassword())) {
            return "Invalid credentials!";
        }
        return "Login successful!";
    }
}


//controller 



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UserService userService;

    // Register user
    @PostMapping("/register")
    public String register(@RequestBody User user) {
        return userService.registerUser(user);
    }

    // Login user
    @PostMapping("/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        return userService.loginUser(username, password);
    }
}


//

package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/h2-console/**").permitAll()  // Allow access to H2 console without login
                .antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
                .anyRequest().authenticated()  // Other pages should be authenticated
                .and()
            .formLogin()
                .loginPage("/login")  // Set custom login page if needed
                .permitAll()
                .and()
            .logout()
                .permitAll()
                .and()
            .csrf().ignoringAntMatchers("/h2-console/**");  // Disable CSRF for H2 console

        // Allow frames to be loaded for H2 console
        http.headers().frameOptions().sameOrigin();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}



//package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests()
                .requestMatchers("/h2-console/**").permitAll() // Allow access to H2 console
                .anyRequest().authenticated()                 // Secure all other requests
                .and()
            .formLogin()
                .permitAll()
                .and()
            .logout()
                .permitAll()
                .and()
            .csrf()
                .ignoringRequestMatchers("/h2-console/**")    // Disable CSRF for H2 console
                .and()
            .headers()
                .frameOptions().sameOrigin();                // Allow H2 console in iframes

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


//react
//auth

import React, { createContext, useContext, useState } from 'react';
import axios from 'axios';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);

  const register = async (username, password, email) => {
    try {
      const response = await axios.post('/api/auth/register', { username, password, email });
      return { success: true, message: response.data };
    } catch (error) {
      return { success: false, message: error.response?.data || 'Registration failed!' };
    }
  };

  const login = async (username, password) => {
    try {
      const response = await axios.post('/api/auth/login', { username, password });
      if (response.data) {
        setCurrentUser(username);
        return { success: true, message: 'Login successful!' };
      }
      return { success: false, message: 'Invalid credentials!' };
    } catch (error) {
      return { success: false, message: 'Login failed!' };
    }
  };

  return (
    <AuthContext.Provider value={{ currentUser, register, login }}>
      {children}
    </AuthContext.Provider>
  );
};



//loginsignup 
import React, { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import './LoginSignup.css';

const LoginSignup = () => {
  const { register, login } = useContext(AuthContext);
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isLogin) {
      const result = await login(username, password);
      setMessage(result.message);
      if (result.success) {
        navigate('/employee-list'); // Redirect after login
      }
    } else {
      const result = await register(username, password, email);
      setMessage(result.message);
      if (result.success) {
        setIsLogin(true); // Switch to login after successful registration
      }
    }
  };

  return (
    <div className="container">
      <h2>{isLogin ? 'LOGIN' : 'SIGN UP'}</h2>
      <form onSubmit={handleSubmit}>
        <label>Username:</label>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />
        <label>Password:</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        {!isLogin && (
          <>
            <label>Email:</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </>
        )}
        <br />
        <button type="submit">{isLogin ? 'Login' : 'Sign Up'}</button>
      </form>
      {message && <p>{message}</p>}
      <div className="toggle-button">
        <button onClick={() => setIsLogin(!isLogin)}>
          {isLogin ? "Don't have an account? Sign Up" : 'Already have an account? Login'}
        </button>
      </div>
    </div>
  );
};

export default LoginSignup;


//

import axios from "axios";

export const AuthProvider = ({ children }) => {
  const register = async (username, password, email) => {
    try {
      const response = await axios.post("/api/auth/register", {
        username,
        password,
        email,
      });
      return { success: true, message: response.data };
    } catch (error) {
      return { success: false, message: error.response?.data || "Registration failed!" };
    }
  };

  const login = async (username, password) => {
    try {
      const response = await axios.post("/api/auth/login", {
        username,
        password,
      });
      return { success: true, message: response.data };
    } catch (error) {
      return { success: false, message: error.response?.data || "Login failed!" };
    }
  };

  return (
    <AuthContext.Provider value={{ register, login }}>
      {children}
    </AuthContext.Provider>
  );
};



//

const LoginSignup = () => {
  const { register, login } = useContext(AuthContext);
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isLogin) {
      const result = await login(username, password);
      setMessage(result.message);
      if (result.success) {
        navigate("/employee-list");
      }
    } else {
      const result = await register(username, password, email);
      setMessage(result.message);
      if (result.success) {
        setIsLogin(true);
      }
    }
  };

  return (
    <div className="container">
      <h2>{isLogin ? "LOGIN" : "SIGN UP"}</h2>
      <form onSubmit={handleSubmit}>
        <label>Username:</label>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />

        <label>Password:</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />

        {!isLogin && (
          <>
            <label>Email:</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </>
        )}

        <br />
        <button type="submit">{isLogin ? "Login" : "Sign Up"}</button>
        <br />
      </form>
      {message && <p>{message}</p>}
      <div className="toggle-button">
        <button onClick={() => setIsLogin(!isLogin)}>
          {isLogin ? "Don't have an account? Sign Up" : "Already have an account? Login"}
        </button>
      </div>
    </div>
  );
};

export default LoginSignup;


//new one

//auth

import React, { createContext, useContext, useState } from 'react';

// Create AuthContext
export const AuthContext = createContext();
export const useAuth = () => useContext(AuthContext);

// AuthProvider Component
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(
    JSON.parse(localStorage.getItem('user')) || null
  );

  const [isAuthenticated, setIsAuthenticated] = useState(!!currentUser);

  // Register function
  const register = async (username, password, email) => {
    try {
      const response = await fetch('/api/users/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password, email }),
      });

      if (response.ok) {
        const data = await response.json();
        return { success: true, message: 'Registration successful!' };
      } else {
        const error = await response.json();
        return { success: false, message: error.message || 'Registration failed!' };
      }
    } catch (error) {
      console.error('Error during registration:', error);
      return { success: false, message: 'An error occurred. Please try again.' };
    }
  };

  // Login function
  const login = async (username, password) => {
    try {
      const response = await fetch('/api/users/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
      });

      if (response.ok) {
        const data = await response.json();
        localStorage.setItem('user', JSON.stringify(data.user));
        setCurrentUser(data.user);
        setIsAuthenticated(true);
        return { success: true, message: data.message };
      } else {
        const error = await response.json();
        return { success: false, message: error.message || 'Login failed!' };
      }
    } catch (error) {
      console.error('Error during login:', error);
      return { success: false, message: 'An error occurred. Please try again.' };
    }
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('user');
    setCurrentUser(null);
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider value={{ currentUser, isAuthenticated, register, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};


//loginsignup

import React, { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import './LoginSignup.css';

const LoginSignup = () => {
  const { register, login } = useContext(AuthContext);
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    let result;

    if (isLogin) {
      result = await login(username, password);
    } else {
      result = await register(username, password, email);
    }

    setMessage(result.message);

    if (result.success) {
      if (isLogin) {
        navigate('/employee-list'); // Redirect to employee list after login
      } else {
        setIsLogin(true); // Switch to login after successful registration
      }
    }
  };

  return (
    <div className="container">
      <h2>{isLogin ? 'LOGIN' : 'SIGN UP'}</h2>
      <form onSubmit={handleSubmit}>
        <label>Username:</label>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />

        {!isLogin && (
          <>
            <label>Email:</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </>
        )}

        <label>Password:</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />

        <button type="submit">{isLogin ? 'Login' : 'Sign Up'}</button>
      </form>

      {message && <p>{message}</p>}

      <button onClick={() => setIsLogin(!isLogin)}>
        {isLogin ? "Don't have an account? Sign Up" : 'Already have an account? Login'}
      </button>
    </div>
  );
};

export default LoginSignup;

-------------------------

//controller

@Autowired
	public StudentService studentService;
	
	
	@PostMapping("/save")
	public StudentDto create(@RequestBody StudentDto stu) {
		return studentService.create(stu);
	}
	
	@GetMapping("/get/{id}")
	public StudentDto getById(@PathVariable Integer id) {
		return studentService.getEmpById(id);
	}
	
	@GetMapping("/getAll")
	public List<StudentDto> getAll(){
		return studentService.getAll();
	}
	
	@GetMapping("/getAll1")
	public List<Student> getAll1(){
		return studentService.getAll1();
	}
	
	@PutMapping("/update/{id}")
	public Student updateStudent(@RequestBody StudentDto studentDto, @PathVariable Integer id) {
		return studentService.updateStudent(studentDto, id);
	}
	
	@DeleteMapping("/delete/{id}")
	public void deleteEmp(@PathVariable Integer id) {
		studentService.deleteStu(id);
	}
	
	// Register user
    @PostMapping("/user/register")
    public ResponseEntity<String> register(@RequestBody UserDetails user) {
         studentService.registerUser(user);
    	return ResponseEntity.ok("User Register Successfully");	
    }

    // Login user
    @PostMapping("/user/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        return studentService.loginUser(username, password);
    }


//service


//	@Autowired
//	private StudentRepo studentRepo;
	
	@Autowired
	private StudentRepository str;
	
	@Autowired
	private UserDetailRepo userRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	public EmailService emailService;
 
	
	public StudentDto create(StudentDto stu) {
		if(!UtilityClass.numbervalidate(stu.getNumber())) {
			throw new IllegalArgumentException ("Invalid Mobile Number!");
		}
		Student student = modelMapper.map(stu, Student.class);
		Student saveStu = str.save(student);
		return modelMapper.map(saveStu, StudentDto.class);
	}
	
	public List<StudentDto> getAll(){
		Student stu = (Student) str.findAll();
		return (List<StudentDto>) modelMapper.map(stu, StudentDto.class);
	}

	public List<Student> getAll1(){
		return str.findAll();
	}
	
	public StudentDto getEmpById(Integer id) {
		Student stu = str.findById(id).orElseThrow(() -> new RuntimeException("Employee not found"));
		return modelMapper.map(stu, StudentDto.class);
	}
	
	public Student updateStudent(StudentDto studentDto, Integer id) {
		Student emp = str.findById(id).orElseThrow (() -> new RuntimeException ("Employee not found"));
		emp.setName(studentDto.getName());
		emp.setNumber(studentDto.getNumber());
		emp.setEmail(studentDto.getEmail());
//		emp.setPassword(studentDto.getPassword());
//		emp.setCountry(studentDto.getCountry());
		emp.setDepartment(studentDto.getDepartment());
		emp.setSalary(studentDto.getSalary());
		return str.save(emp);
	}
	
	public void deleteStu(Integer id) {
		if(!str.existsById(id)) {
			throw new RuntimeException("Employee" + id + "not found" );
		}
		str.deleteById(id);
	}  
	
	
	
	// Register user
    public String registerUser(UserDetails user) {
        if (userRepo.findByUsername(user.getUsername()) != null) {
            return "Username already exists!";
        }
//        user.setUserName(user.getUserName());
//        user.setPassword(user.getPassword());
//        user.setEmail(user.getEmail());
        emailService.sendWelcomeEmail(user.getEmail(), user.getPassword());
        userRepo.save(user);
        return "User registered successfully!";
    }
    

    // Login user
    public String loginUser(String username, String password) {
        UserDetails user = userRepo.findByUsername(username);
        if (user == null || !user.getPassword().equals(password)) {
            return "Invalid credentials!";
        }
        return "Login successful!";
    }
	
	
//	//Register
//	public String registerUser(String username, String password) {
//        Optional<UserDetails> existingUser = userRepo.findByUsername(username);
//        if (existingUser.isPresent()) {
//            return "User already exists!";
//        }
//        UserDetails newUser = new UserDetails();
//        userRepo.save(newUser);
//        return "Registration successful!";
//    }
//
//	
//	//Login
//    public boolean authenticateUser(String username, String password) {
//        Optional<UserDetails> user = userRepo.findByUsername(username);
//        return user.map(value -> value.getPassword().equals(password)).orElse(false);
//    }




//repo

UserDetails findByUsername(String username);

//application property

spring.application.name=Student_Details-3

spring.h2.console.enabled=true
spring.datasource.platform=h2
spring.datasource.url=jdbc:h2:mem:laksh
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=lakshmi.krishnakumar@verizon.com
spring.mail.password=your_email_password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true



